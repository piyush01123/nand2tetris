// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=instA);
    Not(in=instA, out=instC); //ins[15] = 0 => instA=1, ins[15]=1=>instC=1

    Mux16(a=outMprev, b=instruction, sel=instA, out=iregA);
    // Load A either if instruction is of type A or if dest bit for A in instruction = 1
    Or(a=instA, b=instruction[5], out=loadA);
    ARegister(in=iregA, load=loadA, out=A, out[0..14]=addressM);

    // Use M if ins[12]==1 else use A
    Mux16(a=A, b=inM, sel=instruction[12], out=AM);

    // Load D only if instruction is of type C and dest bit for D in instruction = 1
    And(a=instC, b=instruction[4], out=loadD);
    DRegister(in=outMprev, load=loadD, out=D);

    ALU(x=D,y=AM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],zr=zr,ng=ng,out=outM,out=outMprev);

    // writeM = 1 if instruction is of C type and dest bit for M = 1
    And(a=instC, b=instruction[3], out=writeM);

    // Jump Bits: 100->JLT, 010->JEQ, 001->JGT where the 3 digits denote j1 (out<0), j2(out=0), j3(out>0)
    // Also have to make sure in all situations that the corresponding jump bit in instruction is 1
    And(a=zr, b=instruction[1], out=jeq);
    And(a=ng, b=instruction[2], out=jlt);
    Or(a=zr, b=ng, out=ltezero);
    Not(in=ltezero, out=gtzero);
    And(a=gtzero, b=instruction[0], out=jgt);
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jump);
    // Only jump if C instruction
    And(a=instC, b=jump, out=jumptoA);
    PC(in=A, inc=true, load=jumptoA, reset=reset, out[0..14]=pc);
}
