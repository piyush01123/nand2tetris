function Screen.init 2
push constant 0
not
pop static 0
push constant 16
call Array.new 1
pop static 1
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
push local 1
push local 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.clearScreen 3
push static 0
pop local 2
push constant 0
pop static 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 512
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push constant 256
lt
not
if-goto WHILE_END1
push local 0
push local 1
call Screen.drawPixel 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 2
pop static 0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 3
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 7
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 1
push constant 0
lt
push argument 1
push constant 255
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 7
call Sys.error 1
pop temp 0
label IF_FALSE1
push argument 0
push constant 16
call Math.divide 2
pop local 2
push constant 16384
push argument 1
push constant 32
call Math.multiply 2
add
push local 2
add
pop local 0
push argument 0
push local 2
push constant 16
call Math.multiply 2
sub
pop local 1
push static 0
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push local 0
call Memory.peek 1
push local 1
push static 1
add
pop pointer 1
push that 0
or
call Memory.poke 2
pop temp 0
goto IF_END2
label IF_FALSE2
push local 0
push local 0
call Memory.peek 1
push local 1
push static 1
add
pop pointer 1
push that 0
not
and
call Memory.poke 2
pop temp 0
label IF_END2
push constant 0
return
function Screen.drawLine 0
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 8
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 2
push constant 0
lt
push argument 2
push constant 511
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 8
call Sys.error 1
pop temp 0
label IF_FALSE1
push argument 1
push constant 0
lt
push argument 1
push constant 255
gt
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 8
call Sys.error 1
pop temp 0
label IF_FALSE2
push argument 3
push constant 0
lt
push argument 3
push constant 255
gt
or
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 8
call Sys.error 1
pop temp 0
label IF_FALSE3
push argument 0
push argument 2
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 0
push argument 1
push argument 3
call Math.min 2
push argument 1
push argument 3
call Math.max 2
call Screen.drawVerticalLine 3
pop temp 0
push constant 0
return
label IF_FALSE4
push argument 1
push argument 3
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push argument 1
push argument 0
push argument 2
call Math.min 2
push argument 0
push argument 2
call Math.max 2
call Screen.drawHorizontalLine 3
pop temp 0
push constant 0
return
label IF_FALSE5
push argument 0
push argument 2
lt
push argument 1
push argument 3
lt
and
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push argument 0
push argument 1
push argument 2
push argument 0
sub
push argument 3
push argument 1
sub
call Screen.drawPosSlopedLine 4
pop temp 0
push constant 0
return
label IF_FALSE6
push argument 2
push argument 0
lt
push argument 3
push argument 1
lt
and
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push argument 2
push argument 3
push argument 0
push argument 2
sub
push argument 1
push argument 3
sub
call Screen.drawPosSlopedLine 4
pop temp 0
push constant 0
return
label IF_FALSE7
push argument 0
push argument 2
lt
push argument 1
push argument 3
gt
and
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push argument 0
push argument 1
push argument 2
push argument 0
sub
push argument 3
push argument 1
sub
call Screen.drawNegSlopedLine 4
pop temp 0
push constant 0
return
label IF_FALSE8
push argument 2
push argument 0
lt
push argument 1
push argument 3
lt
and
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push argument 2
push argument 3
push argument 0
push argument 2
sub
push argument 1
push argument 3
sub
call Screen.drawNegSlopedLine 4
pop temp 0
push constant 0
return
label IF_FALSE9
push constant 0
return
function Screen.drawPosSlopedLine 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
label WHILE_EXP0
push local 0
push argument 2
lt
push local 1
push argument 3
lt
and
not
if-goto WHILE_END0
push local 2
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
push local 2
push argument 3
sub
pop local 2
goto IF_END0
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
push local 2
push argument 2
add
pop local 2
label IF_END0
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawNegSlopedLine 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
label WHILE_EXP0
push local 0
push argument 2
lt
push local 1
push argument 3
gt
and
not
if-goto WHILE_END0
push local 2
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push constant 1
sub
pop local 1
push local 2
push argument 2
sub
pop local 2
goto IF_END0
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
push local 2
push argument 3
sub
pop local 2
label IF_END0
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawVerticalLine 0
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
label WHILE_EXP0
push argument 1
push argument 2
lt
not
if-goto WHILE_END0
push argument 1
push constant 1
add
pop argument 1
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawHorizontalLine 0
push argument 1
push argument 0
call Screen.drawPixel 2
pop temp 0
label WHILE_EXP0
push argument 1
push argument 2
lt
not
if-goto WHILE_END0
push argument 1
push constant 1
add
pop argument 1
push argument 1
push argument 0
call Screen.drawPixel 2
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawRectangle 0
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 9
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 2
push constant 0
lt
push argument 2
push constant 511
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 9
call Sys.error 1
pop temp 0
label IF_FALSE1
push argument 1
push constant 0
lt
push argument 1
push constant 255
gt
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 9
call Sys.error 1
pop temp 0
label IF_FALSE2
push argument 3
push constant 0
lt
push argument 3
push constant 255
gt
or
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 9
call Sys.error 1
pop temp 0
label IF_FALSE3
push argument 0
push argument 2
gt
push argument 1
push argument 3
gt
or
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 9
call Sys.error 1
pop temp 0
label IF_FALSE4
push argument 0
push argument 1
push argument 3
call Screen.drawVerticalLine 3
pop temp 0
label WHILE_EXP0
push argument 0
push argument 2
lt
not
if-goto WHILE_END0
push argument 0
push constant 1
add
pop argument 0
push argument 0
push argument 1
push argument 3
call Screen.drawVerticalLine 3
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 3
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 12
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 1
push constant 0
lt
push argument 1
push constant 255
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 12
call Sys.error 1
pop temp 0
label IF_FALSE1
push argument 2
push constant 0
lt
push argument 2
push constant 181
gt
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 13
call Sys.error 1
pop temp 0
label IF_FALSE2
push constant 0
push argument 1
push argument 2
sub
call Math.max 2
pop local 2
label WHILE_EXP0
push local 2
push constant 256
lt
push local 2
push argument 1
push argument 2
add
push constant 1
add
lt
and
not
if-goto WHILE_END0
push argument 1
push local 2
sub
call Math.abs 1
pop local 0
push argument 2
push argument 2
call Math.multiply 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 1
push local 2
push constant 0
push argument 0
push local 1
sub
call Math.max 2
push constant 511
push argument 0
push local 1
add
call Math.min 2
call Screen.drawHorizontalLine 3
pop temp 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
